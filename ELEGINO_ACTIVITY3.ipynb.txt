{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rnFBXpiW120R"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder, MinMaxScaler"
      ],
      "metadata": {
        "id": "qlsjwB1K2EJr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Load dataset\n",
        "data = pd.DataFrame({\n",
        "    'Name': ['Alice', 'Bob', 'Charlie', 'David', np.nan, 'Eve'],\n",
        "    'Age': [25, np.nan, 30, 22, 35, 29],\n",
        "    'Salary': [50000, 60000, np.nan, 45000, 70000, 55000],\n",
        "    'Department': ['HR', 'IT', 'Finance', 'IT', 'Finance', np.nan]\n",
        "})"
      ],
      "metadata": {
        "id": "9YpZas9q2Pyi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(\"Original Dataset:\\n\", data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k2xB2HnR2YBE",
        "outputId": "c2e28712-da3f-4d64-948e-a183d3d17624"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Dataset:\n",
            "       Name   Age   Salary Department\n",
            "0    Alice  25.0  50000.0         HR\n",
            "1      Bob   NaN  60000.0         IT\n",
            "2  Charlie  30.0      NaN    Finance\n",
            "3    David  22.0  45000.0         IT\n",
            "4    Alice  35.0  70000.0    Finance\n",
            "5      Eve  29.0  55000.0    Finance\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Fill missing numerical values with the mean\n",
        "data['Age'].fillna(data['Age'].mean(), inplace=True)\n",
        "data['Salary'].fillna(data['Salary'].mean(), inplace=True)\n",
        "print(\"\\nDataset after handling missing values:\\n\", data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IlR5EQ1h3Fgv",
        "outputId": "5a3ab6f2-0e2d-40fc-bc9c-4022edad49ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Dataset after handling missing values:\n",
            "       Name   Age   Salary Department\n",
            "0    Alice  25.0  50000.0         HR\n",
            "1      Bob  28.2  60000.0         IT\n",
            "2  Charlie  30.0  56000.0    Finance\n",
            "3    David  22.0  45000.0         IT\n",
            "4    Alice  35.0  70000.0    Finance\n",
            "5      Eve  29.0  55000.0    Finance\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-8-530007acd340>:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  data['Age'].fillna(data['Age'].mean(), inplace=True)\n",
            "<ipython-input-8-530007acd340>:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  data['Salary'].fillna(data['Salary'].mean(), inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(\"\\nDataset after handling missing values:\\n\", data)"
      ],
      "metadata": {
        "id": "V4PEZP6i3V-9",
        "outputId": "e06c3778-2597-4eb0-c7aa-5aa9c38d2f98",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Dataset after handling missing values:\n",
            "       Name   Age   Salary Department\n",
            "0    Alice  25.0  50000.0         HR\n",
            "1      Bob  28.2  60000.0         IT\n",
            "2  Charlie  30.0  56000.0    Finance\n",
            "3    David  22.0  45000.0         IT\n",
            "4    Alice  35.0  70000.0    Finance\n",
            "5      Eve  29.0  55000.0    Finance\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 2. Encoding Categorical Variables\n",
        "encoder = LabelEncoder()\n",
        "data['Department'] = encoder.fit_transform(data['Department'])\n",
        "print(\"\\nDataset after encoding categorical variables:\\n\", data)"
      ],
      "metadata": {
        "id": "-rLsAIvv3bl5",
        "outputId": "939cfa2a-de0c-4212-f6da-51cc21528412",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Dataset after encoding categorical variables:\n",
            "       Name   Age   Salary  Department\n",
            "0    Alice  25.0  50000.0           1\n",
            "1      Bob  28.2  60000.0           2\n",
            "2  Charlie  30.0  56000.0           0\n",
            "3    David  22.0  45000.0           2\n",
            "4    Alice  35.0  70000.0           0\n",
            "5      Eve  29.0  55000.0           0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 1. Handling Missing Values\n",
        "# Fill missing values in 'Name' and 'Department' with the most frequent value\n",
        "data['Julie'].fillna(data['Julie'].mode()[0], inplace=True)\n",
        "data['ICT'].fillna(data['ICT'].mode()[0], inplace=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SCqDKevr2dpT",
        "outputId": "50a1d700-6f21-4924-a866-6bd5b840e153"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-e919341cca0e>:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  data['Name'].fillna(data['Name'].mode()[0], inplace=True)\n",
            "<ipython-input-5-e919341cca0e>:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  data['Department'].fillna(data['Department'].mode()[0], inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 3. Feature Scaling\n",
        "scaler = MinMaxScaler()\n",
        "data[['Age', 'Salary']] = scaler.fit_transform(data[['Age', 'Salary']])  # Normalize Age and Salary\n",
        "print(\"\\nDataset after normalization:\\n\", data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s5YliZW_3mbO",
        "outputId": "85f2a789-bb31-4cc1-bb2d-a03212cf6b01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Dataset after normalization:\n",
            "       Name       Age  Salary  Department\n",
            "0    Alice  0.230769    0.20           1\n",
            "1      Bob  0.476923    0.60           2\n",
            "2  Charlie  0.615385    0.44           0\n",
            "3    David  0.000000    0.00           2\n",
            "4    Alice  1.000000    1.00           0\n",
            "5      Eve  0.538462    0.40           0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 4. Save Model title (\"processed-data.h5\")"
      ],
      "metadata": {
        "id": "IwUo9_lq3odg"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}